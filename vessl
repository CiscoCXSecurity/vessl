#!/bin/bash

######################
################
#
# vessl - 0.3.1
#
#	Usage: vessl -h host [-p port] [-c certfile] [-v]	
#
# This is a little script which gets and verifies ssl certificates
#
#		Copyright (C) 21/08/2008 - deanx <RID[at]portcullis-secuirty.com>
#	
#	Version 0.3.1 
#	
#	* This program is free software; you can redistribute it and/or modify
#	* it under the terms of the GNU General Public License as published by
# 	* the Free Software Foundation; either version 2 of the License, or
#	* (at your option) any later version.
#	*
# 	* This program is distributed in the hope that it will be useful,
# 	* but WITHOUT ANY WARRANTY; without even the implied warranty of
# 	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# 	* GNU General Public License for more details.
# 	*
# 	* You should have received a copy of the GNU General Public License
# 	* along with this program; if not, write to the Free Software
# 	* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.	
#
###############
#####################


port="443"
host="NOTSET"
cafile="/etc/certs/mozilla.pem"
verify=`mktemp -t vesslXXXXXX`
cert=`mktemp -t vesslXXXXXX`

while getopts "h:p:?c:v" o
	do
		case "$o" in
			h)	host="$OPTARG";;
			p)	port="$OPTARG";;
			c)	cafile="$OPTARG";;
			v)	verbose=1;;
			[?])	echo -en "    Usage: $0 -h host [-p port] [-c certfile] [-v]\n\n" 
				exit 1;;
		esac
	done

if [ $host = "NOTSET" ]
	then 
	echo -en "\n\t[!] hostname (-h) is required\n\n"
	echo -en "    Usage: $0 -h host [-p port] [-c certfile] [-v]\n\n"
	exit 1
fi

if [ ! -r $cafile ]
	then echo -en "\n\t[!] \"$cafile\" does not exists, please specify one with -c or copy it to the default location\n\n"
	exit 1
fi

a=`which ping | grep no | cut -f 1 -d " "`

if [ ! -w "." ];
	then echo -en "\n\t[!] CWD is not writeable please sort this out as no files will be written, dumping to screen\n"
	verbose=1
	copy=1
fi

if [ ! -x $a ];
	then echo -en "\n\t[!] ping is not in your path!\n"
	exit 1
fi


a=`which openssl | grep no | cut -f 1 -d " "`

if [ ! -x $a ];
	then echo -en "\n\t[!] openssl is not in your path!\n"
	exit 1
fi

a=`which openssl-vulnkey | grep no | cut -f 1 -d " "`

if [ ! -x $a ];
	then echo -en "\n\t[!] openssl-vulnkey is not in your path, disabling debian weak key detection!\n"
	echo -en "\t\t check out https://launchpad.net/ubuntu/+source/openssl-blacklist/\n"
	debian=1
fi


ip=`ping -c 1 -t 1 -i 1 $host 2>/dev/null| grep data | cut -d\( -f 2| cut -f 1 -d\)`

if [ ! $verbose ];
	then echo -en "\n\t[+] Connecting to $host:$port which resolves as $ip\n"
fi

echo "Connecting to $host:$port which resolves as $ip" >> $verify
echo | openssl s_client -showcerts -verify 9 -CAfile $cafile -connect $host:$port 2>>$verify | openssl x509 -text 2>/dev/null > $cert

if [ $? -ne  0 ]; then
	if [ $verbose ];
			then echo -en "\n\t[+] Connecting to $host:$port which resolves as $ip\n"
	fi
	echo -en "\n\t[!] Connection/Certificate Retrieval Failed\n\n";
	rm $verify
	rm $cert
	exit 1
fi

rhost=`openssl x509 -subject -in $cert -noout | grep "/CN.*" -o |cut -f 2 -d= | cut -f1 -d/`
rip=`ping -c 1 -t 1 -i 1 $rhost 2>/dev/null| grep data | cut -d\( -f 2| cut -f 1 -d\)`

if [ "$rip" = "" ];then
	rip="Cannot Resolve Host"
fi

if [ "$ip" = "$rip" ]; then
	echo "Host in certificate matches given IP " $rip >> $verify
else
	echo "verify error:num=99:ip mismatch given vs cert ($ip vs $rip ($rhost))" >> $verify	
fi

echo "$ip:$port, $rhost ($rip)" >> $verify



if [ ! $debian ];
	then openssl-vulnkey $cert >> $verify
	if [ $? -ne 0 ]
		then echo "verify error:num=98:debian weak key detected" >> $verify
	fi
	
fi

if [ $verbose ]; then
	echo
	cat $verify
fi

if [ ! $copy ]; then
	if [ ! $verbose ]; then 
		echo -en "\n\t[+] Map data added to ./sslmap\n"
		echo -en "\n\t[+] Verification data written to ./$ip:$port.verify\n"
		echo -en "\n\t[+] Certificate written to ./$ip:$port.cert\n"
	fi
	echo "$ip:$port, $rhost ($rip)" >> sslmap
	cp $verify $ip\:$port.verify
	cp $cert $ip\:$port.cert
fi
echo
rm $verify
rm $cert